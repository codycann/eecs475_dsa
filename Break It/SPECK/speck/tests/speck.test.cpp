#define BOOST_TEST_MODULE SpeckTests
#include <boost/test/unit_test.hpp>
#define __UNIT_TESTING
#include <speck.h>
#include <speck.cpp>
#include <cstdint>
#include <vector>

using namespace crypto;
using namespace std;

void testSpeck(int blockBits, int keyBits, vector<uint8_t> key, vector<uint8_t> pt, vector<uint8_t> ct) {
    Speck cipher(blockBits, keyBits);
    vector<uint8_t> buffer(ct.size());

    cipher.setKey(key.data());
    cipher.encryptBlock(pt.data(), buffer.data());
    BOOST_CHECK(ct == buffer);

    cipher.decryptBlock(ct.data(), buffer.data());
    BOOST_CHECK(pt == buffer);
}

BOOST_AUTO_TEST_CASE(test_speck_vectors) {
    testSpeck(32, 64, {0x19, 0x18, 0x11, 0x10, 0x09, 0x08, 0x01, 0x00}, {0x65, 0x74, 0x69, 0x4c}, {0xa8, 0x68, 0x42, 0xf2});
    testSpeck(48, 72, {0x12, 0x11, 0x10, 0x0a, 0x09, 0x08, 0x02, 0x01, 0x00}, {0x20, 0x79, 0x6c, 0x6c, 0x61, 0x72}, {0xc0, 0x49, 0xa5, 0x38, 0x5a, 0xdc});
    testSpeck(48, 96, {0x1a, 0x19, 0x18, 0x12, 0x11, 0x10, 0x0a, 0x09, 0x08, 0x02, 0x01, 0x00}, {0x6d, 0x20, 0x73, 0x69, 0x68, 0x74}, {0x73, 0x5e, 0x10, 0xb6, 0x44, 0x5d});
    testSpeck(64, 96, {0x13, 0x12, 0x11, 0x10, 0x0b, 0x0a, 0x09, 0x08, 0x03, 0x02, 0x01, 0x00}, {0x74, 0x61, 0x46, 0x20, 0x73, 0x6e, 0x61, 0x65}, {0x9f, 0x79, 0x52, 0xec, 0x41, 0x75, 0x94, 0x6c});
    testSpeck(64, 128, {0x1b, 0x1a, 0x19, 0x18, 0x13, 0x12, 0x11, 0x10, 0x0b, 0x0a, 0x09, 0x08, 0x03, 0x02, 0x01, 0x00}, {0x3b, 0x72, 0x65, 0x74, 0x74, 0x75, 0x43, 0x2d}, {0x8c, 0x6f, 0xa5, 0x48, 0x45, 0x4e, 0x02, 0x8b});
    testSpeck(96, 96, {0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00}, {0x65, 0x77, 0x6f, 0x68, 0x20, 0x2c, 0x65, 0x67, 0x61, 0x73, 0x75, 0x20}, {0x9e, 0x4d, 0x09, 0xab, 0x71, 0x78, 0x62, 0xbd, 0xde, 0x8f, 0x79, 0xaa});
    testSpeck(96, 144, {0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00}, {0x65, 0x6d, 0x69, 0x74, 0x20, 0x6e, 0x69, 0x20, 0x2c, 0x72, 0x65, 0x76}, {0x2b, 0xf3, 0x10, 0x72, 0x22, 0x8a, 0x7a, 0xe4, 0x40, 0x25, 0x2e, 0xe6});
    testSpeck(128, 128, {0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00}, {0x6c, 0x61, 0x76, 0x69, 0x75, 0x71, 0x65, 0x20, 0x74, 0x69, 0x20, 0x65, 0x64, 0x61, 0x6d, 0x20}, {0xa6, 0x5d, 0x98, 0x51, 0x79, 0x78, 0x32, 0x65, 0x78, 0x60, 0xfe, 0xdf, 0x5c, 0x57, 0x0d, 0x18});
    testSpeck(128, 192, {0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00}, {0x72, 0x61, 0x48, 0x20, 0x66, 0x65, 0x69, 0x68, 0x43, 0x20, 0x6f, 0x74, 0x20, 0x74, 0x6e, 0x65}, {0x1b, 0xe4, 0xcf, 0x3a, 0x13, 0x13, 0x55, 0x66, 0xf9, 0xbc, 0x18, 0x5d, 0xe0, 0x3c, 0x18, 0x86});
}

BOOST_AUTO_TEST_CASE(test_speck_128_256) {
    testSpeck(128, 256, {0x1f, 0x1e, 0x1d, 0x1c, 0x1b, 0x1a, 0x19, 0x18, 0x17, 0x16, 0x15, 0x14, 0x13, 0x12, 0x11, 0x10, 0x0f, 0x0e, 0x0d, 0x0c, 0x0b, 0x0a, 0x09, 0x08, 0x07, 0x06, 0x05, 0x04, 0x03, 0x02, 0x01, 0x00}, {0x65, 0x73, 0x6f, 0x68, 0x74, 0x20, 0x6e, 0x49, 0x20, 0x2e, 0x72, 0x65, 0x6e, 0x6f, 0x6f, 0x70}, {0x41, 0x09, 0x01, 0x04, 0x05, 0xc0, 0xf5, 0x3e, 0x4e, 0xee, 0xb4, 0x8d, 0x9c, 0x18, 0x8f, 0x43});
}

struct speck_test_vector {
    int blockBits;
    int keyBits;
    const vector<uint8_t> key;
    const vector<uint8_t> pt;
    const vector<uint8_t> ct;
};

#include "./test-vectors.h"

BOOST_AUTO_TEST_CASE(test_extra) {
    for (auto& testcase : test_vectors) {
        testSpeck(testcase.blockBits, testcase.keyBits, testcase.key, testcase.pt, testcase.ct);
    }
}