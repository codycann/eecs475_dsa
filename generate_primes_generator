#include <iostream>
#include <cstdlib>
#include <time.h>
#include <gmp.h>
#include <chrono>
#include <fstream>
#include "string.h"
#include <sstream>
#include <math.h>
#include <gmpxx.h>

using namespace std;


void getprime(unsigned int bitsp, int bitsq, mpz_t myprime, gmp_randstate_t state, mpz_t q);

void get_gen(mpz_t p, mpz_t q, mpz_t g);

void get_gen(mpz_t p, mpz_t q,  mpz_t g)
{
	mpz_t ans;
	mpz_init(ans);
	
	mpz_t exp;
	mpz_init(exp);
	
	mpz_t pminus1;
	mpz_init(pminus1);
	
	mpz_sub_ui(pminus1, p, 1);
	mpz_tdiv_q(exp, pminus1, q);
	
	mpz_t h;
	mpz_init(h);
	
	mpz_set_d(h, 2);
	int indicator = 0;
	while(!indicator)
	{
		mpz_powm(ans, h, exp, p);
		indicator = mpz_cmp_d(ans, 1);
		if(indicator)
		{
			mpz_set(g, ans);
			return;
		}
		mpz_add_ui(h, g, 1);
		mpz_out_str(stdout,10, h);
		cout  << endl;
		
	}


}

		
void getprime(unsigned int bitsp, int bitsq, mpz_t p, gmp_randstate_t state, mpz_t q)
{	
	

	int qprime = 0;
	int pprime;
	while(qprime == 0)
	{	
		//this will run until q is determined to be prime
		mpz_urandomb(q, state, bitsq);
		qprime = mpz_probab_prime_p(q, 50);
	}
	mpz_t p_minus_one;
	mpz_t temp2_p;
	mpz_init(temp2_p);
	mpz_init(p_minus_one);
	//according to something I read online, mpz_mul_2exp can be used as a left shift
	mpz_mul_2exp(p_minus_one, q, bitsp-bitsq);
	size_t sizeofp = mpz_sizeinbase(p_minus_one, 2);
	//basically loook for an appropriately sized p that's also prime
	while(sizeofp == bitsp && !pprime)
	{
		//basically this will add 1 to (p-1) and check primality
		mpz_add_ui(temp2_p, p_minus_one, 1);
		pprime = mpz_probab_prime_p(temp2_p, 50);
		if(pprime)
		{
			//YAYYYY
			mpz_set(p, temp2_p);
			cout << "prime found!!!!!" << endl;
			cout << "p: ";
			mpz_out_str(stdout,10, p);
			cout << endl << "q: ";
			mpz_out_str(stdout,10, q);
			cout << endl;
			return;
		}
		mpz_add(p_minus_one, p_minus_one, q);
		sizeofp = mpz_sizeinbase(p_minus_one,2);
	}
	cout << "no prime found.... sorry try again =(" << endl;
	
	return;
}


int main()
{

	int L = 3072;
	int N = 256;
	mpz_t seed;
	mpz_t p;
	mpz_t q;
	mpz_t g;
	mpz_init(g);
	mpz_init(p);
	mpz_init(q);
	mpz_init(seed);
	mpz_set_ui(seed, time(NULL));

	gmp_randstate_t state;
	gmp_randinit_default(state);
	gmp_randseed(state, seed);
	
	getprime(L,N, p, state, q);

	get_gen( p, q, g);
	cout << "g: ";
	mpz_out_str(stdout,10, g);
	cout << endl;
	cout << "done!" << endl;
	
	mpz_t temp;
	mpz_init(temp);
	
	mpz_powm(temp, g, q, p);
	cout << "g^q mod p= ";
	mpz_out_str(stdout, 10, temp);
	cout << endl;
	
	

return 0;
}
		
